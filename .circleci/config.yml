version: 2.1

orbs:
  slack: circleci/slack@4.12.0

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      # - audit-scan-frontend:
      #     requires: [build-frontend]
      # - audit-scan-backend:
      #     requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]
      - configure-infrastructure:
          requires: ["deploy-infrastructure"]
      - run-migrations:
          requires: ["configure-infrastructure"]
      - deploy-frontend:
          requires: ["run-migrations"]
      - deploy-backend:
          requires: ["run-migrations"]
      - smoke-test:
          requires: ["deploy-backend"]
      - cloudfront-update:
          requires: ["smoke-test"]

node-docker-image: &node-docker-image
   docker:
      - image: circleci/node:13.8.0

aws-docker-image: &aws-docker-image
   docker:
      - image: cimg/aws:2022.11

ansible-docker-image: &ansible-docker-image
   docker:
      - image: cimg/deploy:2022.11.1

commands:
  notify-slack:
    steps:
      - slack/notify:
          event: fail
          channel: general
          template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks by workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udacity-backend-${CIRCLE_WORKFLOW_ID}" --region ${AWS_DEFAULT_REGION}
            aws cloudformation delete-stack --stack-name "udacity-frontend-${CIRCLE_WORKFLOW_ID}" --region ${AWS_DEFAULT_REGION}
            aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID})
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
              echo "Migrations successfully reverted"
            fi

jobs:
  build-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependancies
          command: |
            cd frontend
            npm install
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-slack

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependancies
          command: |
            cd backend
            npm install
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm run build
            tar -czf backend-artifact.tar.gz dist/* package*
      - save_cache:
          paths: [backend]
          key: backend-build
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - backend/backend-artifact.tar.gz

  test-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Tests
          command: |
            cd frontend 
            npm run test
      - notify-slack

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Tests
          command: |
            cd backend 
            npm run test
      - notify-slack

  audit-scan-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run audit
          command: |
            cd frontend 
            npm audit --audit-level=critical
      - notify-slack

  audit-scan-backend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run audit
          command: |
            cd backend 
            npm audit --audit-level=critical
      - notify-slack

  deploy-infrastructure:
    <<: *aws-docker-image
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=n-udapeople\
              --stack-name udacity-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=n-udapeople\
              --stack-name udacity-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text  >> .circleci/ansible/inventory.txt
            echo `cat .circleci/ansible/inventory.txt`
      - persist_to_workspace:
          root: ~/
          paths:
          - project/.circleci/ansible/inventory.txt
      - notify-slack
      - destroy-environment

  configure-infrastructure:
    <<: *ansible-docker-image
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f5:53:f8:3c:70:25:6b:3c:50:89:14:d7:5e:98:d9:53"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - notify-slack
      - destroy-environment

  run-migrations:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: add config
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "success" ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID}  -d  '1'
            elif grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
              echo "No migrations are pending"
            else
              exit 1
            fi
      - notify-slack
      - destroy-environment

  deploy-frontend:
    <<: *aws-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cat .env
            export NODE_OPTIONS=--openssl-legacy-provider
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp --recursive frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}"
      - notify-slack
      - destroy-environment
      - revert-migrations

  deploy-backend:
    <<: *ansible-docker-image
    steps:
      - checkout
      - run:
          name: Install NodeJS 13
          command: |
            sudo apt update || true
            sudo apt install nodejs
            sudo apt install npm
            node --version
            npm --version
      - add_ssh_keys:
          fingerprints: ["f5:53:f8:3c:70:25:6b:3c:50:89:14:d7:5e:98:d9:53"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - notify-slack
      - destroy-environment
      - revert-migrations

  smoke-test:
    <<: *aws-docker-image
    steps:
      - checkout
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo $API_URL
            if curl --connect-timeout 5 "${API_URL}/api/status" | grep "ok"; 
            then
              echo "Backend is not reachable"
              exit 0;
            else
              exit 1;
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
            echo $URL
            if curl ${URL} | grep "Welcome";
            then
              echo "Frontend is not reachable"
              exit 0;
            else
              exit 1;
            fi
      - notify-slack
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    <<: *aws-docker-image
    steps:
      - checkout
      - run:
          name: Save existing Workflow ID to kvdb.io
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name=='WorkflowID'].Value" \
              --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation update-stack --template-file .circleci/files/cloudfront.yml \
            --use-previous-template \
            --stack-name ProductionStack \
            --parameters ParameterKey=WorkflowID,ParameterValue=$CIRCLE_WORKFLOW_ID,UsePreviousValue=false

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
      - notify-slack
      - destroy-environment
      - revert-migrations
