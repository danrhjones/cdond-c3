version: 2.1

orbs:
  slack: circleci/slack@4.12.0

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      # - audit-scan-frontend:
      #     requires: [build-frontend]
      # - audit-scan-backend:
      #     requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend]

node-docker-image: &node-docker-image
   docker:
      - image: circleci/node:13.8.0

aws-docker-image: &aws-docker-image
   docker:
      - image: cimg/aws:2022.11

commands:
  notify-slack:
    steps:
      - slack/notify:
          event: fail
          channel: general
          template: basic_fail_1

jobs:
  build-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependancies
          command: |
            cd frontend
            npm install
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify-slack

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependancies
          command: |
            cd backend
            npm install
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Tests
          command: |
            cd frontend 
            npm run test
      - notify-slack

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Tests
          command: |
            cd backend 
            npm run test
      - notify-slack

  audit-scan-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run audit
          command: |
            cd frontend 
            npm audit --audit-level=critical
      - notify-slack

  audit-scan-backend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run audit
          command: |
            cd backend 
            npm audit --audit-level=critical
      - notify-slack

  deploy-infrastructure:
    <<: *aws-docker-image
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=n-udapeople\
              --stack-name n-udacity-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=n-udapeople\
              --stack-name n-udacity-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure    
